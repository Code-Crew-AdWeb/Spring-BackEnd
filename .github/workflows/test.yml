name: Deploy workflow on production

on:
  push:
    branches:
      - develop

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
      - uses: actions/checkout@v3

      # open jdk 17 버전 환경을 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      
      # # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
      # - name: Make application.properties
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application.properties
      #     echo "${{ secrets.PROPERTIES }}" > ./application.properties
      #   shell: bash

      # gradle을 통해 소스를 빌드.
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test
      - name: Login to DockerHub                       #스텝의 이름
        uses: docker/login-action@v1                   #사용할 동작
        with:                                          #동작에 대한 input값 사용 선언
          username: ${{ secrets.DOCKERHUB_USERNAME }}  #Docker Hub의 사용자 ID
          password: ${{ secrets.DOCKERHUB_TOKEN }}     #Docker Hub에서 발급 받은 사용자 Token    

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
      - name: Docker build & push to docker repo
        run: |
        
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/codecrew .
          docker push ${{ secrets.DOCKER_REPO }}/codecrew

      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다. 
      # 실행 시, docker-compose를 사용합니다.
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(sudo docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/directors-dev
            sudo docker-compose up -d
            sudo docker image prune -f
